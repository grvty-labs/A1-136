# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-17 20:52
from __future__ import unicode_literals

import MainAPP.hardcode
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import easy_thumbnails.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=50, verbose_name='Text')),
                ('edition_date', models.DateTimeField(auto_now=True, verbose_name='Last edition date')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'permissions': (('query_answer', 'Can query Answer'), ('list_answer', 'Can list Answers')),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('edition_date', models.DateTimeField(auto_now=True, verbose_name='Last edition date')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'permissions': (('query_category', 'Can query Category'), ('list_category', 'Can list Categories')),
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('edition_date', models.DateTimeField(auto_now=True, verbose_name='Last edition date')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
                ('categories', models.ManyToManyField(related_name='clusters', to='MainAPP.Category', verbose_name='Categories')),
            ],
            options={
                'verbose_name': 'Cluster',
                'verbose_name_plural': 'Clusters',
                'permissions': (('query_cluster', 'Can query Cluster'), ('list_cluster', 'Can list Clusters')),
            },
        ),
        migrations.CreateModel(
            name='IsometricImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', easy_thumbnails.fields.ThumbnailerImageField(default='isometrics/no-img.jpg', upload_to=MainAPP.hardcode.isometric_image_upload, verbose_name='Isometric Image')),
                ('edition_date', models.DateTimeField(auto_now=True, verbose_name='Last edition date')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='isometric_images', to='MainAPP.Cluster', verbose_name='Cluster')),
            ],
            options={
                'verbose_name': 'Isometric Image',
                'verbose_name_plural': 'Isometric Images',
                'permissions': (('query_isometricimage', 'Can query Isometric Image'), ('list_isometricimage', 'Can list Isometric Images')),
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.IntegerField(verbose_name='Row')),
                ('column', models.IntegerField(verbose_name='Column')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('isometric_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='MainAPP.IsometricImage', verbose_name='Isometric Image')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'permissions': (('query_position', 'Can query Position'), ('list_position', 'Can list Positions')),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200, verbose_name='Text')),
                ('edition_date', models.DateTimeField(auto_now=True, verbose_name='Last edition date')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'permissions': (('query_question', 'Can query Question'), ('list_question', 'Can list Questions')),
            },
        ),
        migrations.CreateModel(
            name='Selection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to='MainAPP.Answer', verbose_name='Answer')),
            ],
            options={
                'verbose_name': 'Selection',
                'verbose_name_plural': 'Selections',
                'permissions': (('query_selection', 'Can query Selection'), ('list_selection', 'Can list Selections')),
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=45, null=True, verbose_name='Middle Name')),
                ('mothers_name', models.CharField(blank=True, max_length=45, null=True, verbose_name='Mothers Name')),
                ('nickname', models.CharField(blank=True, max_length=45, null=True, verbose_name='Nickname')),
                ('avatar', easy_thumbnails.fields.ThumbnailerImageField(blank=True, default='avatars/no-img.jpg', null=True, upload_to=MainAPP.hardcode.user_avatar_upload, verbose_name='Profile picture')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('gender', models.IntegerField(blank=True, choices=[(0, 'Prefer not to say'), (2, 'Male'), (1, 'Female'), (3, 'Other')], default=0, null=True, verbose_name='Gender')),
                ('step', models.IntegerField(choices=[(0, 'Unknown'), (1, 'Poll'), (2, 'Canvas'), (3, 'Done')], default=0, verbose_name='Step')),
                ('occupation', models.CharField(blank=True, max_length=100, null=True, verbose_name='Occupation')),
                ('edition_date', models.DateTimeField(auto_now=True, verbose_name='Last edition date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': (('query_customuser', 'Can query User'), ('list_customuser', 'Can list User')),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='selection',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='position',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='isometricimage',
            name='users',
            field=models.ManyToManyField(related_name='isometric_images', through='MainAPP.Position', to=settings.AUTH_USER_MODEL, verbose_name='Users'),
        ),
        migrations.AddField(
            model_name='answer',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='MainAPP.Category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='MainAPP.Question', verbose_name='Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='users',
            field=models.ManyToManyField(related_name='answers', through='MainAPP.Selection', to=settings.AUTH_USER_MODEL, verbose_name='Users'),
        ),
    ]
